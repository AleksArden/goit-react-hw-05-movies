{"version":3,"file":"static/js/736.ff245168.chunk.js","mappings":"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","sources":["components/Cast/Cast.styled.jsx","components/Cast/Cast.jsx","constans/ImageURL.js","constans/Status.js","services/Movies.services.js"],"sourcesContent":["import styled from 'styled-components';\n\nexport const Wrapper = styled.div`\n  padding: 16px 24px;\n`;\nexport const List = styled.ul`\n  list-style: none;\n`;\nexport const Item = styled.li`\n  display: flex;\n  align-items: center;\n  width: 400px;\n  padding: 8px 0;\n  border-bottom: 1px solid black;\n`;\nexport const Thumb = styled.div`\n  padding-left: 16px;\n`;\nexport const Name = styled.p`\n  margin-bottom: 8px;\n`;\n","import { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { IMAGE_URL } from 'constans/ImageURL';\nimport { fetchCastById } from 'services/Movies.services';\nimport { STATUS } from 'constans/Status';\nimport { Wrapper, List, Item, Thumb, Name } from './Cast.styled';\nimport imageReplace from 'assets/poster/poster-not-found.jpg';\n\nconst Cast = () => {\n  const [cast, setCast] = useState([]);\n  const [status, setStatus] = useState(STATUS.idle);\n\n  const { movieId } = useParams();\n\n  useEffect(() => {\n    const getCast = async query => {\n      setStatus(STATUS.loading);\n      try {\n        const data = await fetchCastById(query);\n        onResolve(data);\n      } catch (error) {\n        console.log(error);\n        setStatus(STATUS.error);\n      }\n    };\n    getCast(movieId);\n  }, [movieId]);\n\n  const onResolve = data => {\n    const dataCast = data.map(({ cast_id, character, name, profile_path }) => ({\n      id: cast_id,\n      character,\n      name,\n      image: profile_path,\n    }));\n\n    setCast(dataCast);\n    setStatus(STATUS.success);\n  };\n  return (\n    <Wrapper>\n      {status === STATUS.error && <h2>NOT FOUND</h2>}\n      {status === STATUS.loading && <p>Loading...</p>}\n      {status === STATUS.success && cast.length === 0 ? (\n        <p>Not information</p>\n      ) : (\n        <List>\n          {cast.map(({ id, character, name, image }) => (\n            <Item key={id}>\n              {image ? (\n                <img src={`${IMAGE_URL}` + image} alt={name} width=\"150\" />\n              ) : (\n                <img src={imageReplace} alt=\"Not poster\" width=\"150\" />\n              )}\n              <Thumb>\n                <Name>{name}</Name>\n                <p>\n                  <b>Character:</b> {character}\n                </p>\n              </Thumb>\n            </Item>\n          ))}\n        </List>\n      )}\n    </Wrapper>\n  );\n};\nexport default Cast;\n","\nexport const IMAGE_URL = 'https://image.tmdb.org/t/p/w500';","export const STATUS = {\n    idle: 'idle',\n    loading: 'loading',\n    success: 'success',\n    error: 'error',\n}","import axios from 'axios';\n\nconst moviesApi = axios.create({\n    baseURL: 'https://api.themoviedb.org/3/',\n});\nconst ApiKey = '51cea464d1158e7d34cacf903de39a42';\n\nexport const fetchTrendingMovies = async () => {\n    const {\n        data: { results },\n    } = await moviesApi.get(`trending/movie/day`, {\n        params: {\n            api_key: ApiKey,\n        },\n    });\n    return results;\n};\n\nexport const fetchSearchMovies = async searchName => {\n    const {\n        data: { results },\n    } = await moviesApi.get(`search/movie`, {\n        params: {\n            api_key: ApiKey,\n            query: searchName,\n        },\n    });\n    return results;\n};\n\nexport const fetchMovieDetailsById = async movieId => {\n    const { data } = await moviesApi.get(`movie/${movieId}`, {\n        params: {\n            api_key: ApiKey,\n        },\n    });\n    return data;\n};\n\nexport const fetchCastById = async movieId => {\n    const {\n        data: { cast },\n    } = await moviesApi.get(`movie/${movieId}/credits`, {\n        params: {\n            api_key: ApiKey,\n        },\n    });\n    return cast;\n};\n\nexport const fetchReviewsById = async movieId => {\n    const {\n        data: { results },\n    } = await moviesApi.get(`movie/${movieId}/reviews`, {\n        params: {\n            api_key: ApiKey,\n        },\n    });\n    return results;\n};\n"],"names":["Wrapper","styled","List","Item","Thumb","Name","useState","cast","setCast","STATUS","status","setStatus","movieId","useParams","useEffect","getCast","query","fetchCastById","data","onResolve","console","log","dataCast","map","id","cast_id","character","name","image","profile_path","length","src","IMAGE_URL","alt","width","imageReplace","idle","loading","success","error","moviesApi","axios","baseURL","ApiKey","fetchTrendingMovies","get","params","api_key","results","fetchSearchMovies","searchName","fetchMovieDetailsById","fetchReviewsById"],"sourceRoot":""}