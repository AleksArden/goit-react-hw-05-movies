{"version":3,"file":"static/js/305.5be12eee.chunk.js","mappings":"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","sources":["constans/Status.js","pages/MoviesPage/MoviesPage.styled.jsx","pages/MoviesPage/MoviesPage.jsx","services/Movies.services.js"],"sourcesContent":["export const STATUS = {\n    idle: 'idle',\n    loading: 'loading',\n    success: 'success',\n    error: 'error',\n}","import styled from 'styled-components';\nexport const Form = styled.form`\n  padding-left: 24px;\n  padding-top: 24px;\n`;\nexport const Input = styled.input`\n  width: 300px;\n`;\n","import { useEffect, useState } from 'react';\nimport { Link, useLocation, useSearchParams } from 'react-router-dom';\nimport { Form, Input } from './MoviesPage.styled';\nimport { fetchSearchMovies } from 'services/Movies.services';\nimport { STATUS } from 'constans/Status';\nimport Notiflix from 'notiflix';\n\nNotiflix.Notify.init({\n  width: '400px',\n  fontSize: '20px',\n  cssAnimationStyl: 'zoom',\n  position: 'center-center',\n});\n\nconst MoviesPage = () => {\n  const [status, setStatus] = useState(STATUS.idle);\n  const [searchParams, setSearchParams] = useSearchParams();\n  const [movies, setMovies] = useState([]);\n  const searchName = searchParams.get('query');\n  const location = useLocation();\n\n  const handleSubmit = evt => {\n    evt.preventDefault();\n    const { value } = evt.target.elements.search;\n    if (value === '') {\n      Notiflix.Notify.info('Please, fill in the search field!');\n    }\n    setMovies([]);\n    setSearchParams({ query: value });\n  };\n  useEffect(() => {\n    if (!searchName) return;\n    if (searchName === '') return;\n    const getMovies = async () => {\n      setStatus(STATUS.loading);\n      try {\n        const data = await fetchSearchMovies(searchName);\n        onResolve(data);\n      } catch (error) {\n        console.log(error);\n        setStatus(STATUS.error);\n      }\n    };\n    getMovies();\n  }, [searchName]);\n\n  const onResolve = data => {\n    if (data.length === 0) {\n      Notiflix.Notify.failure(\n        'Sorry, there are no images matching your search query. Please try again.'\n      );\n      setStatus(STATUS.idle);\n      return;\n    }\n    const moviesName = data.map(({ id, original_title }) => ({\n      id,\n      title: original_title,\n    }));\n    setMovies(moviesName);\n    setStatus(STATUS.success);\n  };\n\n  return (\n    <div>\n      <Form onSubmit={handleSubmit}>\n        <Input type=\"text\" autoComplete=\"off\" name=\"search\" />\n        <button type=\"submit\">Search</button>\n      </Form>\n      {status === STATUS.error && <h2>NOT FOUND</h2>}\n      {status === STATUS.loading && <p>Loading...</p>}\n      <ul>\n        {movies &&\n          movies.map(({ id, title }) => (\n            <li key={id}>\n              <Link to={`${id}`} state={{ from: location }}>\n                {title}\n              </Link>\n            </li>\n          ))}\n      </ul>\n    </div>\n  );\n};\nexport default MoviesPage;\n","import axios from 'axios';\n\nconst moviesApi = axios.create({\n    baseURL: 'https://api.themoviedb.org/3/',\n});\nconst ApiKey = '51cea464d1158e7d34cacf903de39a42';\n\nexport const fetchTrendingMovies = async () => {\n    const {\n        data: { results },\n    } = await moviesApi.get(`trending/movie/day`, {\n        params: {\n            api_key: ApiKey,\n        },\n    });\n    return results;\n};\n\nexport const fetchSearchMovies = async searchName => {\n    const {\n        data: { results },\n    } = await moviesApi.get(`search/movie`, {\n        params: {\n            api_key: ApiKey,\n            query: searchName,\n        },\n    });\n    return results;\n};\n\nexport const fetchMovieDetailsById = async movieId => {\n    const { data } = await moviesApi.get(`movie/${movieId}`, {\n        params: {\n            api_key: ApiKey,\n        },\n    });\n    return data;\n};\n\nexport const fetchCastById = async movieId => {\n    const {\n        data: { cast },\n    } = await moviesApi.get(`movie/${movieId}/credits`, {\n        params: {\n            api_key: ApiKey,\n        },\n    });\n    return cast;\n};\n\nexport const fetchReviewsById = async movieId => {\n    const {\n        data: { results },\n    } = await moviesApi.get(`movie/${movieId}/reviews`, {\n        params: {\n            api_key: ApiKey,\n        },\n    });\n    return results;\n};\n"],"names":["STATUS","idle","loading","success","error","Form","styled","Input","Notiflix","width","fontSize","cssAnimationStyl","position","useState","status","setStatus","useSearchParams","searchParams","setSearchParams","movies","setMovies","searchName","get","location","useLocation","useEffect","getMovies","fetchSearchMovies","data","onResolve","console","log","length","moviesName","map","id","title","original_title","onSubmit","evt","preventDefault","value","target","elements","search","query","type","autoComplete","name","to","state","from","moviesApi","axios","baseURL","ApiKey","fetchTrendingMovies","params","api_key","results","fetchMovieDetailsById","movieId","fetchCastById","cast","fetchReviewsById"],"sourceRoot":""}