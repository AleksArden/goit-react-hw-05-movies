{"version":3,"file":"static/js/612.b0722ee7.chunk.js","mappings":"uKAAO,IAAMA,EAAS,CAClBC,KAAM,OACNC,QAAS,UACTC,QAAS,UACTC,MAAO,Q,gLCFEC,EAAOC,EAAAA,GAAAA,GAAH,yC,SCwBjB,EAtBuB,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OAClBC,GAAWC,EAAAA,EAAAA,MACjB,OACE,wBACGF,EAAOG,KAAI,gBAAGC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,MAAP,OACV,SAACP,EAAD,WACE,SAAC,KAAD,CAAMQ,GAAE,iBAAYF,GAAMG,MAAO,CAAEC,KAAMP,GAAzC,SACGI,KAFMD,EADD,KASjB,E,UChBYK,EAAUV,EAAAA,GAAAA,IAAH,+CAGPW,EAAQX,EAAAA,GAAAA,GAAH,gDC6ClB,EA3CiB,WACf,OAA4BY,EAAAA,EAAAA,UAAS,IAArC,eAAOX,EAAP,KAAeY,EAAf,KACA,GAA4BD,EAAAA,EAAAA,UAASlB,EAAAA,EAAAA,MAArC,eAAOoB,EAAP,KAAeC,EAAf,MAEAC,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAS,mCAAG,2FAChBF,EAAUrB,EAAAA,EAAAA,SADM,mBAGKwB,EAAAA,EAAAA,MAHL,OAGRC,EAHQ,OAIdC,EAAUD,GAJI,gDAMdE,QAAQC,IAAR,MACAP,EAAUrB,EAAAA,EAAAA,OAPI,yDAAH,qDAUfuB,GACD,GAAE,IACH,IAAMG,EAAY,SAAAD,GAChB,IAAMI,EAAcJ,EAAKf,KAAI,kBAA6B,CACxDC,GAD2B,EAAGA,GAE9BC,MAF2B,EAAOkB,eAAP,IAI7BX,EAAUU,GACVR,EAAUrB,EAAAA,EAAAA,QACX,EACD,OACE,UAACgB,EAAD,WACGI,IAAWpB,EAAAA,EAAAA,QAAgB,SAACiB,EAAD,wBAC3BG,IAAWpB,EAAAA,EAAAA,UACV,iCACE,SAACiB,EAAD,8BACA,yCAGHG,IAAWpB,EAAAA,EAAAA,UACV,iCACE,SAACiB,EAAD,8BACA,SAAC,EAAD,CAAgBV,OAAQA,SAKjC,C,yLC9CKwB,E,QAAYC,EAAAA,OAAa,CAC3BC,QAAS,kCAEPC,EAAS,mCAEFV,EAAmB,mCAAG,sGAGrBO,EAAUI,IAAV,qBAAoC,CAC1CC,OAAQ,CACJC,QAASH,KALc,uBAEnBI,EAFmB,EAE3Bb,KAAQa,QAFmB,kBAQxBA,GARwB,2CAAH,qDAWnBC,EAAiB,mCAAG,WAAMC,GAAN,yFAGnBT,EAAUI,IAAV,eAA8B,CACpCC,OAAQ,CACJC,QAASH,EACTO,MAAOD,KANc,uBAEjBF,EAFiB,EAEzBb,KAAQa,QAFiB,kBAStBA,GATsB,2CAAH,sDAYjBI,EAAqB,mCAAG,WAAMC,GAAN,yFACVZ,EAAUI,IAAV,gBAAuBQ,GAAW,CACrDP,OAAQ,CACJC,QAASH,KAHgB,uBACzBT,EADyB,EACzBA,KADyB,kBAM1BA,GAN0B,2CAAH,sDASrBmB,EAAa,mCAAG,WAAMD,GAAN,yFAGfZ,EAAUI,IAAV,gBAAuBQ,EAAvB,YAA0C,CAChDP,OAAQ,CACJC,QAASH,KALQ,uBAEbW,EAFa,EAErBpB,KAAQoB,KAFa,kBAQlBA,GARkB,2CAAH,sDAWbC,EAAgB,mCAAG,WAAMH,GAAN,yFAGlBZ,EAAUI,IAAV,gBAAuBQ,EAAvB,YAA0C,CAChDP,OAAQ,CACJC,QAASH,KALW,uBAEhBI,EAFgB,EAExBb,KAAQa,QAFgB,kBAQrBA,GARqB,2CAAH,qD","sources":["constans/Status.js","components/TrendingMovies/TrendingMovies.styled.jsx","components/TrendingMovies/TrendingMovies.jsx","pages/HomePage/HomePage.styled.jsx","pages/HomePage/HomePage.jsx","services/Movies.services.js"],"sourcesContent":["export const STATUS = {\n    idle: 'idle',\n    loading: 'loading',\n    success: 'success',\n    error: 'error',\n}","import styled from 'styled-components';\n\nexport const Item = styled.li`\n  padding: 4px;\n`;\n","import { Link, useLocation } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport { Item } from './TrendingMovies.styled';\n\nconst TrendingMovies = ({ movies }) => {\n  const location = useLocation();\n  return (\n    <ul>\n      {movies.map(({ id, title }) => (\n        <Item key={id}>\n          <Link to={`movies/${id}`} state={{ from: location }}>\n            {title}\n          </Link>\n        </Item>\n      ))}\n    </ul>\n  );\n};\nTrendingMovies.propTypes = {\n  movies: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number.isRequired,\n      title: PropTypes.string.isRequired,\n    }).isRequired\n  ).isRequired,\n};\nexport default TrendingMovies;\n","import styled from 'styled-components';\nexport const Wrapper = styled.div`\n  padding: 24px 48px;\n`;\nexport const Title = styled.h2`\n  margin-bottom: 16px;\n`;\n","import { useState, useEffect } from 'react';\nimport { fetchTrendingMovies } from 'services/Movies.services';\nimport TrendingMovies from 'components/TrendingMovies/TrendingMovies';\nimport { STATUS } from 'constans/Status';\nimport { Wrapper, Title } from './HomePage.styled';\n\nconst HomePage = () => {\n  const [movies, setMovies] = useState([]);\n  const [status, setStatus] = useState(STATUS.idle);\n\n  useEffect(() => {\n    const getMovies = async () => {\n      setStatus(STATUS.loading);\n      try {\n        const data = await fetchTrendingMovies();\n        onResolve(data);\n      } catch (error) {\n        console.log(error);\n        setStatus(STATUS.error);\n      }\n    };\n    getMovies();\n  }, []);\n  const onResolve = data => {\n    const movieTitles = data.map(({ id, original_title }) => ({\n      id,\n      title: original_title,\n    }));\n    setMovies(movieTitles);\n    setStatus(STATUS.success);\n  };\n  return (\n    <Wrapper>\n      {status === STATUS.error && <Title>NOT FOUND</Title>}\n      {status === STATUS.loading && (\n        <>\n          <Title>Trending today</Title>\n          <p>Loading...</p>\n        </>\n      )}\n      {status === STATUS.success && (\n        <>\n          <Title>Trending today</Title>\n          <TrendingMovies movies={movies} />\n        </>\n      )}\n    </Wrapper>\n  );\n};\nexport default HomePage;\n","import axios from 'axios';\n\nconst moviesApi = axios.create({\n    baseURL: 'https://api.themoviedb.org/3/',\n});\nconst ApiKey = '51cea464d1158e7d34cacf903de39a42';\n\nexport const fetchTrendingMovies = async () => {\n    const {\n        data: { results },\n    } = await moviesApi.get(`trending/movie/day`, {\n        params: {\n            api_key: ApiKey,\n        },\n    });\n    return results;\n};\n\nexport const fetchSearchMovies = async searchName => {\n    const {\n        data: { results },\n    } = await moviesApi.get(`search/movie`, {\n        params: {\n            api_key: ApiKey,\n            query: searchName,\n        },\n    });\n    return results;\n};\n\nexport const fetchMovieDetailsById = async movieId => {\n    const { data } = await moviesApi.get(`movie/${movieId}`, {\n        params: {\n            api_key: ApiKey,\n        },\n    });\n    return data;\n};\n\nexport const fetchCastById = async movieId => {\n    const {\n        data: { cast },\n    } = await moviesApi.get(`movie/${movieId}/credits`, {\n        params: {\n            api_key: ApiKey,\n        },\n    });\n    return cast;\n};\n\nexport const fetchReviewsById = async movieId => {\n    const {\n        data: { results },\n    } = await moviesApi.get(`movie/${movieId}/reviews`, {\n        params: {\n            api_key: ApiKey,\n        },\n    });\n    return results;\n};\n"],"names":["STATUS","idle","loading","success","error","Item","styled","movies","location","useLocation","map","id","title","to","state","from","Wrapper","Title","useState","setMovies","status","setStatus","useEffect","getMovies","fetchTrendingMovies","data","onResolve","console","log","movieTitles","original_title","moviesApi","axios","baseURL","ApiKey","get","params","api_key","results","fetchSearchMovies","searchName","query","fetchMovieDetailsById","movieId","fetchCastById","cast","fetchReviewsById"],"sourceRoot":""}